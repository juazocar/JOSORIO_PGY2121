/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cl.duoc.poo.view;

import cl.duoc.poo.controller.PeliculaController;
import cl.duoc.poo.model.entities.Pelicula;
import java.awt.BorderLayout;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.util.List;
/**
 *
 * @author Ignacio Osorio
 */
public class Listar extends javax.swing.JFrame {

    /**
     * Creates new form Listar
     */
    public Listar() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        this.txt_aniodesde.setEnabled(false);
        this.txt_aniohasta.setEnabled(false);
        this.cbo_filtrogenero.setEnabled(false);
        this.lbl_desde.setEnabled(false);
        this.lbl_hasta.setEnabled(false);
        
        
        txt_anio.setVisible(false);
        txt_director.setVisible(false);
        txt_duracion.setVisible(false);
        txt_editarid.setVisible(false);
        txt_titulo.setVisible(false);
        cbo_genero.setVisible(false);
        btn_modificar.setVisible(false);
        btn_eliminar.setVisible(false);
        

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_datos = new javax.swing.JTable();
        btn_buscar = new javax.swing.JButton();
        txt_titulo = new javax.swing.JTextField();
        txt_director = new javax.swing.JTextField();
        txt_anio = new javax.swing.JTextField();
        txt_duracion = new javax.swing.JTextField();
        btn_modificar = new javax.swing.JButton();
        txt_editarid = new javax.swing.JTextField();
        cbo_genero = new javax.swing.JComboBox<>();
        btn_eliminar = new javax.swing.JButton();
        cbo_filtrogenero = new javax.swing.JComboBox<>();
        txt_aniodesde = new javax.swing.JTextField();
        box_anio = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_aniohasta = new javax.swing.JTextField();
        lbl_desde = new javax.swing.JLabel();
        lbl_hasta = new javax.swing.JLabel();
        box_genero = new javax.swing.JCheckBox();

        jLabel5.setText("jLabel5");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));
        jPanel1.setForeground(new java.awt.Color(0, 204, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 48)); // NOI18N
        jLabel1.setText("Peliculas Registradas  ");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("HoytsMarkPlanet");

        tbl_datos.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tbl_datos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Titulo", "Director", "Año", "Duracion (Minutos)", "Genero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl_datos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_datosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_datos);

        btn_buscar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_buscar.setText("Buscar");
        btn_buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_buscarActionPerformed(evt);
            }
        });

        txt_titulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_tituloActionPerformed(evt);
            }
        });

        txt_director.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_directorActionPerformed(evt);
            }
        });

        txt_anio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_anioActionPerformed(evt);
            }
        });

        btn_modificar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_modificar.setText("Modificar");
        btn_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_modificarActionPerformed(evt);
            }
        });

        txt_editarid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_editaridActionPerformed(evt);
            }
        });

        cbo_genero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genero", "Accion", "Aventura", "Catastrofe", "Ciencia ficcion", "Comedia", "Documentales", "Drama", "Fantasia", "Musicales", "Suspenso", "Terror" }));

        btn_eliminar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_eliminar.setText("Eliminar");
        btn_eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_eliminarActionPerformed(evt);
            }
        });

        cbo_filtrogenero.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Genero", "Accion", "Aventura", "Catastrofe", "Ciencia ficcion", "Comedia", "Documentales", "Drama", "Fantasia", "Musicales", "Suspenso", "Terror" }));

        txt_aniodesde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_aniodesdeActionPerformed(evt);
            }
        });

        box_anio.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        box_anio.setText("Filtro");
        box_anio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_anioActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Año");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Género");

        jLabel6.setText("-");

        lbl_desde.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_desde.setText("Desde");

        lbl_hasta.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbl_hasta.setText("Hasta");

        box_genero.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        box_genero.setText("Filtro");
        box_genero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box_generoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(btn_eliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_modificar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 993, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(box_anio)
                                    .addComponent(box_genero))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbl_desde)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(btn_buscar)))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbo_filtrogenero, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txt_aniodesde, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel6)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lbl_hasta)
                                                    .addComponent(txt_aniohasta, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txt_editarid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(101, 101, 101)
                                .addComponent(txt_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txt_director, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(txt_anio, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addComponent(txt_duracion, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(cbo_genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(52, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_desde)
                    .addComponent(box_anio)
                    .addComponent(lbl_hasta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_aniodesde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txt_aniohasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_buscar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbo_filtrogenero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(box_genero))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_editarid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_titulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_director, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_anio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbo_genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_duracion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_modificar)
                    .addComponent(btn_eliminar))
                .addGap(15, 15, 15)
                .addComponent(jLabel2))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_buscarActionPerformed
        
        //Ocultar cuadros de modificacion cada vez que se reinicie la busqueda
        txt_anio.setVisible(false);
        txt_director.setVisible(false);
        txt_duracion.setVisible(false);
        txt_editarid.setVisible(false);
        txt_titulo.setVisible(false);
        cbo_genero.setVisible(false);
        btn_modificar.setVisible(false);
        btn_eliminar.setVisible(false);
        
        
        
        limpiarDatos();
        
        //Atributos de la clase
        String titulo, director, genero;
        int anio, duracion, id_pelicula;
        
        //Variables usadas para filtro de búsqueda
        int anioDesde = 0, anioHasta = 0;
        String filtroGenero = "";
        
        //Instanciar clase Registro para usar sus métodos
        PeliculaController peliculaController = new PeliculaController();
        //RegistroPelicula reg = new RegistroPelicula();
        
        //Asignar modelo a jtable
        DefaultTableModel modelo = (DefaultTableModel) tbl_datos.getModel();
        
        modelo.setRowCount(0);//Ordernar tabla por la primera columna
        

        
        //MOSTRAR REGISTROS FILTRADOS POR AÑO Y GÉNERO
        if(box_anio.isSelected() && box_genero.isSelected()){
            
            if(validarFiltroAnio() && validarFiltroGenero()){
                anioDesde = Integer.parseInt(this.txt_aniodesde.getText());
                anioHasta = Integer.parseInt(this.txt_aniohasta.getText());
                filtroGenero = this.cbo_filtrogenero.getSelectedItem().toString();
            }
            
            List<Pelicula> lista = peliculaController.buscarFiltro(anioDesde, anioHasta, filtroGenero);
            
            for(Pelicula tmp : lista){
                id_pelicula = tmp.getIdPelicula();
                titulo = tmp.getTitulo();
                director = tmp.getDirector();
                anio = tmp.getAnio();
                duracion = tmp.getDuracion();
                genero = tmp.getGenero();
                
                modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
            }
        //FIN PRIMER IF
        
        
        
        //MOSTRAR REGISTROS FILTRADOS POR AÑO    
        }else if(box_anio.isSelected()){
            
            if(validarFiltroAnio()){
                anioDesde = Integer.parseInt(this.txt_aniodesde.getText());
                anioHasta = Integer.parseInt(this.txt_aniohasta.getText());
                filtroGenero = "genero";
            }
            
            List<Pelicula> lista = peliculaController.buscarFiltro(anioDesde, anioHasta, filtroGenero);
            
            for(Pelicula tmp : lista){
                id_pelicula = tmp.getIdPelicula();
                titulo = tmp.getTitulo();
                director = tmp.getDirector();
                anio = tmp.getAnio();
                duracion = tmp.getDuracion();
                genero = tmp.getGenero();
                
                modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
            }
        //FIN SEGUNDO IF    
        
        
        
        //MOSTRAR REGISTROS FILTRADOS POR GÉNERO
        }else if(box_genero.isSelected()){
            
            if(validarFiltroGenero()){
                anioDesde = 0;
                anioHasta = 0;
                filtroGenero = this.cbo_filtrogenero.getSelectedItem().toString();
            }
            
            List<Pelicula> lista = peliculaController.buscarFiltro(anioDesde, anioHasta, filtroGenero);
            
            for(Pelicula tmp : lista){
                id_pelicula = tmp.getIdPelicula();
                titulo = tmp.getTitulo();
                director = tmp.getDirector();
                anio = tmp.getAnio();
                duracion = tmp.getDuracion();
                genero = tmp.getGenero();
                
                modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
            }
        //FIN TERCER IF
        
        
        //MOSTRAR TODOS LOS REGISTROS
        }else{
            id_pelicula = 0;
        
            if(id_pelicula == 0){ //LISTAR TODOS LOS REGISTROS
                List<Pelicula> lista = peliculaController.buscarTodos();

                for(Pelicula tmp : lista){
                    id_pelicula = tmp.getIdPelicula();
                    titulo = tmp.getTitulo();
                    director = tmp.getDirector();
                    anio = tmp.getAnio();
                    duracion = tmp.getDuracion();
                    genero = tmp.getGenero();

                    modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
                }

            }
        }
        
        //ORDENAR TABLA POR ID
        ordenarTablaPorIdPelicula();
        
        
        /*
        //Se carga en 0 para listar todas las películas
        try {
            id_pelicula = Integer.parseInt(txt_.getText());
        } catch (Exception e) {
            id_pelicula = 0;
        }
        */        
        
        /*
        id_pelicula = 0;
        
        if(id_pelicula == 0){ //LISTAR TODOS LOS REGISTROS
            ArrayList<Pelicula> lista = reg.buscarTodos();
            
            for(Pelicula tmp : lista){
                id_pelicula = tmp.getIdPelicula();
                titulo = tmp.getTitulo();
                director = tmp.getDirector();
                anio = tmp.getAnio();
                duracion = tmp.getDuracion();
                genero = tmp.getGenero();
                
                modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
            }
            
        }else{
            Pelicula peli = reg.buscarPorId(id_pelicula); //BUSCAR POR ID
            id_pelicula = peli.getIdPelicula();
            titulo = peli.getTitulo();
            director = peli.getDirector();
            anio = peli.getAnio();
            duracion = peli.getDuracion();
            genero = peli.getGenero();
            
            modelo.addRow(new Object[] {id_pelicula,titulo, director, anio, duracion, genero} );
        }
        */
        
        
        
        
        
        //LISTAR PELÍCULAS REGISTRADAS EN COLECCIÓN
        
        /*
        JPanel panel = new JPanel();
        
        DefaultTableModel tableModel = new DefaultTableModel(); //Traemos toda la funcionalidad de tabla tableModel
        
        panel.setLayout(new BorderLayout()); //Rediseño los bordes de mi tabla
        
        //Titulo de columnas
        String[] columNames = {"Titulo","Director","Año","Duracion","Categoría"};
        tableModel.setColumnIdentifiers(columNames);
        
        Object[] fila = new Object[tableModel.getColumnCount()];
        
        // Ordenar por la primera columna de mayor a menor por defecto

        
        if(RegistroPelicula.getListadopeliculas().size() > 0){
            for(int i=0; i < RegistroPelicula.getListadopeliculas().size(); i++){
                //fila[0] = RegistroPelicula.getListadopeliculas().get(i).getIdPelicula();
                fila[0] = RegistroPelicula.getListadopeliculas().get(i).getTitulo();
                fila[1] = RegistroPelicula.getListadopeliculas().get(i).getDirector().toString();
                fila[2] = RegistroPelicula.getListadopeliculas().get(i).getAnio();
                fila[3] = RegistroPelicula.getListadopeliculas().get(i).getDuracion();
                fila[4] = RegistroPelicula.getListadopeliculas().get(i).getGenero().toString();
                tableModel.addRow(fila);
                
            }
            
            this.jTable1.setModel(tableModel);
            
            /*TableRowSorter<TableModel> sorter = new TableRowSorter<>(tableModel);
            jTable1.setRowSorter(sorter);

            // Ordenar por la primera columna de mayor a menor por defecto
            sorter.setSortKeys(java.util.List.of(new RowSorter.SortKey(0, SortOrder.DESCENDING)));
            sorter.sort();
            

        }else{
            
            JOptionPane.showMessageDialog(this,"No se encontraron Peliculas Ingresadas","Alerta",JOptionPane.WARNING_MESSAGE);
            
        }
        */
       
        
    }//GEN-LAST:event_btn_buscarActionPerformed

    private void tbl_datosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_datosMouseClicked
        
        if(evt.getClickCount() == 2){
            txt_anio.setVisible(true);
            txt_director.setVisible(true);
            txt_duracion.setVisible(true);
            txt_editarid.setVisible(true);
            txt_titulo.setVisible(true);
            cbo_genero.setVisible(true);
            btn_modificar.setVisible(true);
            btn_eliminar.setVisible(true);
            
            int fSeleccionada = tbl_datos.rowAtPoint(evt.getPoint());
            
            txt_editarid.setText(String.valueOf(tbl_datos.getValueAt(fSeleccionada,0)));
            txt_editarid.setEditable(false);
            txt_titulo.setText(String.valueOf(tbl_datos.getValueAt(fSeleccionada,1)));
            txt_director.setText(String.valueOf(tbl_datos.getValueAt(fSeleccionada,2)));
            txt_anio.setText(String.valueOf(tbl_datos.getValueAt(fSeleccionada,3)));
            txt_duracion.setText(String.valueOf(tbl_datos.getValueAt(fSeleccionada,4)));
            cbo_genero.setSelectedItem(tbl_datos.getValueAt(fSeleccionada,5));
        
        }
        
        
        
        
    }//GEN-LAST:event_tbl_datosMouseClicked

    private void txt_tituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_tituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_tituloActionPerformed

    private void txt_anioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_anioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_anioActionPerformed

    private void txt_directorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_directorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_directorActionPerformed

    private void btn_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_modificarActionPerformed
        
        String titulo, director, genero;
        int id, anio, duracion;
        
        PeliculaController reg = new PeliculaController();
        
        
        
        
        if(validarDatos()){
            
            id = Integer.parseInt(txt_editarid.getText());
            titulo = txt_titulo.getText();
            director = txt_director.getText();
            anio = Integer.parseInt(txt_anio.getText());
            duracion = Integer.parseInt(txt_duracion.getText());
            genero = cbo_genero.getSelectedItem().toString();
            
            Pelicula peli = new Pelicula(id, titulo, director, anio, duracion, genero);
        
            if(reg.actualizarRegistro(peli)){
                JOptionPane.showMessageDialog(this,"Registro Actualizado en nuestro Sistema","Update", JOptionPane.INFORMATION_MESSAGE);
                txt_anio.setVisible(false);
                txt_director.setVisible(false);
                txt_duracion.setVisible(false);
                txt_editarid.setVisible(false);
                txt_titulo.setVisible(false);
                cbo_genero.setVisible(false);
                btn_modificar.setVisible(false);
                limpiarDatos();
            };
            
            
        }else{
            JOptionPane.showMessageDialog(this,"Favor ingresar datos en todos los campos", "Alerta",JOptionPane.ERROR_MESSAGE);
        }
        
        
        
        
        
    }//GEN-LAST:event_btn_modificarActionPerformed

    private void txt_editaridActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_editaridActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_editaridActionPerformed

    private void txt_aniodesdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_aniodesdeActionPerformed
       
    }//GEN-LAST:event_txt_aniodesdeActionPerformed

    private void box_anioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_anioActionPerformed
        
        if(this.box_anio.isSelected()){
            
            this.txt_aniodesde.setEnabled(true);
            this.txt_aniohasta.setEnabled(true);
            
            this.lbl_desde.setEnabled(true);
            this.lbl_hasta.setEnabled(true);
            
        }else{
            this.txt_aniodesde.setEnabled(false);
            this.txt_aniohasta.setEnabled(false);
            
            this.lbl_desde.setEnabled(false);
            this.lbl_hasta.setEnabled(false);
            this.txt_aniodesde.setText(null);
            this.txt_aniohasta.setText(null);
        }
        
        
    }//GEN-LAST:event_box_anioActionPerformed

    private void box_generoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box_generoActionPerformed
        
        if(this.box_genero.isSelected()){
            
            this.cbo_filtrogenero.setEnabled(true);
            
        }else{
            
            this.cbo_filtrogenero.setEnabled(false);
            this.cbo_filtrogenero.setSelectedItem("Genero");
        }
        
    }//GEN-LAST:event_box_generoActionPerformed

    private void btn_eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_eliminarActionPerformed
        
        int idPelicula;
        //Registrar clase registro pelicula para utilizar método de eliminación
        PeliculaController reg = new PeliculaController();
        
        //Validar que se seleccione un registro en la tabla primero
        if(this.txt_editarid.getText().trim() == null || this.txt_editarid.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this,"Seleccione un registro válido","Seleccionar",JOptionPane.ERROR_MESSAGE);
            
        }else{
            
            //Eliminar registro seleccionado por ID
            idPelicula = Integer.parseInt(this.txt_editarid.getText());
            
            if(reg.eliminarPelicula(idPelicula)){
                JOptionPane.showMessageDialog(this,"Registro eliminado de nuestro sistema","Eliminar",JOptionPane.INFORMATION_MESSAGE);
                
            }
            else{
                JOptionPane.showMessageDialog(this,"ID no existe en nuestros sistemas", "Eliminar",JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
        
    }//GEN-LAST:event_btn_eliminarActionPerformed



    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Listar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Listar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Listar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Listar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Listar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox box_anio;
    private javax.swing.JCheckBox box_genero;
    private javax.swing.JButton btn_buscar;
    private javax.swing.JButton btn_eliminar;
    private javax.swing.JButton btn_modificar;
    private javax.swing.JComboBox<String> cbo_filtrogenero;
    private javax.swing.JComboBox<String> cbo_genero;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_desde;
    private javax.swing.JLabel lbl_hasta;
    private javax.swing.JTable tbl_datos;
    private javax.swing.JTextField txt_anio;
    private javax.swing.JTextField txt_aniodesde;
    private javax.swing.JTextField txt_aniohasta;
    private javax.swing.JTextField txt_director;
    private javax.swing.JTextField txt_duracion;
    private javax.swing.JTextField txt_editarid;
    private javax.swing.JTextField txt_titulo;
    // End of variables declaration//GEN-END:variables


    private void limpiarDatos(){
        txt_anio.setText(null);
        txt_director.setText(null);
        txt_duracion.setText(null);
        txt_titulo.setText(null);
        txt_editarid.setText(null);
        cbo_genero.setSelectedItem("Genero");
    }


    
        
    public void ordenarTablaPorIdPelicula() {
        // Obtén el modelo de la tabla
        DefaultTableModel modelo = (DefaultTableModel) tbl_datos.getModel();

        // Crea un TableRowSorter y asócialo con el modelo de la tabla
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        tbl_datos.setRowSorter(sorter);

        // Establece el índice de la columna por la cual deseas ordenar (en este caso, la columna 0=id_pelicula)
        sorter.setSortKeys(java.util.List.of(new RowSorter.SortKey(0, SortOrder.ASCENDING)));

        // Forza a la tabla a volver a ordenarse según el sorter
        sorter.sort();
    }
    
    private boolean validarDatos(){
        boolean valida_titulo = false;
        boolean valida_director = false;
        boolean valida_anio = false;
        boolean valida_duracion = false;
        boolean valida_genero = false;
        
        
        //Valida titulo de película
        if(this.txt_titulo.getText().trim() == null || this.txt_titulo.getText().trim() == ""){
            JOptionPane.showMessageDialog(this,"Ingrese un título de película correcto.","Alerta",JOptionPane.WARNING_MESSAGE);
            valida_titulo = false;
            
        }else{
            valida_titulo = true;
        }
        
        //Valida Director
        if(this.txt_director.getText().trim() == null || this.txt_director.getText().trim() == ""){
            JOptionPane.showMessageDialog(this,"Ingrese un nombre de Director","Alerta",JOptionPane.WARNING_MESSAGE);
            valida_director = false;
        }else{
            valida_director = true;
        }
        
        //Valida año
        if(this.txt_anio.getText().trim() == null || this.txt_anio.getText().trim() == ""){
            JOptionPane.showMessageDialog(this,"Ingrese el año de la Pelicula","Alerta",JOptionPane.WARNING_MESSAGE);
            valida_anio = false;
        }else{
            valida_anio = true;
        }
        
        //Valida duracion
        if(this.txt_duracion.getText().trim() == null || this.txt_duracion.getText().trim() == ""){
            JOptionPane.showMessageDialog(this,"Ingrese la duración de la pelicula en minutos","Alerta",JOptionPane.WARNING_MESSAGE);
            valida_duracion = false;
        }else{
            valida_duracion = true;
        }
        
        //Valida genero
        if(this.cbo_genero.getSelectedItem().toString() == null || this.cbo_genero.getSelectedItem().toString() == ""){
            JOptionPane.showMessageDialog(this,"Seleccione un género de película","Alerta",JOptionPane.WARNING_MESSAGE);
            valida_genero = false;
        }else{
            valida_genero = true;
        }
        
        return valida_titulo && valida_director && valida_anio && valida_duracion && valida_genero;
        
    }
    
    //VALIDA BUSQUEDA
    
    private boolean validarFiltroAnio(){
        boolean valAnioDesde = false;
        boolean valAnioHasta = false;
        
        try {
                //Válida ingreso de año desde
            if(txt_aniodesde.getText().trim() == null || txt_aniodesde.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(this,"Ingrese un año inicial","Alerta",JOptionPane.WARNING_MESSAGE);
                valAnioDesde = false;

            }else if(this.txt_aniohasta.getText() == null || this.txt_aniohasta.getText().trim().isEmpty()){
                JOptionPane.showMessageDialog(this,"Ingrese un año final","Alerta",JOptionPane.WARNING_MESSAGE);
                valAnioHasta = false;

            }else if(Integer.parseInt(this.txt_aniodesde.getText()) < 1800 || Integer.parseInt(this.txt_aniodesde.getText()) < 1800){
                JOptionPane.showMessageDialog(this,"Ingrese un rango de año mayor a 1800","Alerta",JOptionPane.WARNING_MESSAGE);
                valAnioDesde = false;
                valAnioHasta = false;
            }else if(Integer.parseInt(this.txt_aniohasta.getText()) < Integer.parseInt(this.txt_aniodesde.getText())){
                JOptionPane.showMessageDialog(this,"El año FINAL de búsqueda no puede ser menor al año INICIAL","Alerta",JOptionPane.WARNING_MESSAGE);
                valAnioDesde = false;
                valAnioHasta = false;
            }else{
                valAnioDesde = true;
                valAnioHasta = true;
            }
        } catch (NumberFormatException x) {
            JOptionPane.showMessageDialog(this,"Ingresar sólo números por favor.","Error",JOptionPane.ERROR_MESSAGE);
        }catch (Exception x){
            System.out.println("Excepción recibida: " + x);
        }
        
        
        
        //Válida ingreso de año Hasta
//        if(this.txt_aniohasta.getText() == null || this.txt_aniohasta.getText().equals("")){
//            JOptionPane.showMessageDialog(this,"Ingrese un rango de año válido","Alerta",JOptionPane.WARNING_MESSAGE);
//            valAnioHasta = false;
//        }else{
//            valAnioHasta = true;
//        }
        
        return valAnioDesde && valAnioHasta;
    }
    
    
    private boolean validarFiltroGenero(){
        
        boolean valGenero = false;
        
        //Valida genero
        if(this.cbo_filtrogenero.getSelectedItem().toString() == null || this.cbo_filtrogenero.getSelectedItem().toString().trim().isEmpty() || this.cbo_filtrogenero.getSelectedItem().toString().equals("Genero")){
            JOptionPane.showMessageDialog(this,"Seleccione un género de película","Alerta",JOptionPane.WARNING_MESSAGE);
            valGenero = false;
        }else{
            valGenero = true;
        }
        
        return valGenero;
    }

}
